import {
  AwsSdkSigV4Signer,
  Client,
  Command,
  DEFAULT_MAX_ATTEMPTS,
  DEFAULT_RETRY_MODE,
  DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT,
  DefaultIdentityProviderConfig,
  EndpointCache,
  FetchHttpHandler,
  HttpRequest,
  NoOpLogger,
  ServiceException,
  Sha256,
  _json,
  awsEndpointFunctions,
  calculateBodyLength,
  collectBody,
  createAggregatedClient,
  createDefaultUserAgentProvider,
  createPaginator,
  customEndpointFunctions,
  decorateServiceException,
  expectNonNull,
  expectNumber,
  expectString,
  fromBase64,
  fromUtf8,
  getAwsRegionExtensionConfiguration,
  getContentLengthPlugin,
  getDefaultExtensionConfiguration,
  getEndpointPlugin,
  getHostHeaderPlugin,
  getHttpAuthSchemeEndpointRuleSetPlugin,
  getHttpHandlerExtensionConfiguration,
  getHttpSigningPlugin,
  getLoggerPlugin,
  getRecursionDetectionPlugin,
  getRetryPlugin,
  getSerdePlugin,
  getSmithyContext,
  getUserAgentPlugin,
  invalidProvider,
  loadConfigsForDefaultMode,
  loadRestJsonErrorCode,
  normalizeProvider,
  parseEpochTimestamp,
  parseJsonBody,
  parseJsonErrorBody,
  parseUrl,
  resolveAwsRegionExtensionConfiguration,
  resolveAwsSdkSigV4Config,
  resolveDefaultRuntimeConfig,
  resolveDefaultsModeConfig,
  resolveEndpoint,
  resolveEndpointConfig,
  resolveHostHeaderConfig,
  resolveHttpHandlerRuntimeConfig,
  resolveRegionConfig,
  resolveRetryConfig,
  resolveUserAgentConfig,
  streamCollector,
  take,
  toBase64,
  toUtf8,
  withBaseException
} from "./chunk-V7N3RHZ5.js";
import {
  __publicField
} from "./chunk-34CGUTHX.js";

// node_modules/@aws-sdk/client-health/dist-es/auth/httpAuthSchemeProvider.js
var defaultHealthHttpAuthSchemeParametersProvider = async (config, context, input) => {
  return {
    operation: getSmithyContext(context).operation,
    region: await normalizeProvider(config.region)() || (() => {
      throw new Error("expected `region` to be configured for `aws.auth#sigv4`");
    })()
  };
};
function createAwsAuthSigv4HttpAuthOption(authParameters) {
  return {
    schemeId: "aws.auth#sigv4",
    signingProperties: {
      name: "health",
      region: authParameters.region
    },
    propertiesExtractor: (config, context) => ({
      signingProperties: {
        config,
        context
      }
    })
  };
}
var defaultHealthHttpAuthSchemeProvider = (authParameters) => {
  const options = [];
  switch (authParameters.operation) {
    default: {
      options.push(createAwsAuthSigv4HttpAuthOption(authParameters));
    }
  }
  return options;
};
var resolveHttpAuthSchemeConfig = (config) => {
  const config_0 = resolveAwsSdkSigV4Config(config);
  return Object.assign(config_0, {
    authSchemePreference: normalizeProvider(config.authSchemePreference ?? [])
  });
};

// node_modules/@aws-sdk/client-health/dist-es/endpoint/EndpointParameters.js
var resolveClientEndpointParameters = (options) => {
  return Object.assign(options, {
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "health"
  });
};
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// node_modules/@aws-sdk/client-health/package.json
var package_default = {
  name: "@aws-sdk/client-health",
  description: "AWS SDK for JavaScript Health Client for Node.js, Browser and React Native",
  version: "3.828.0",
  scripts: {
    build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
    "build:cjs": "node ../../scripts/compilation/inline client-health",
    "build:es": "tsc -p tsconfig.es.json",
    "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
    "build:types": "tsc -p tsconfig.types.json",
    "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
    clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
    "extract:docs": "api-extractor run --local",
    "generate:client": "node ../../scripts/generate-clients/single-service --solo health"
  },
  main: "./dist-cjs/index.js",
  types: "./dist-types/index.d.ts",
  module: "./dist-es/index.js",
  sideEffects: false,
  dependencies: {
    "@aws-crypto/sha256-browser": "5.2.0",
    "@aws-crypto/sha256-js": "5.2.0",
    "@aws-sdk/core": "3.826.0",
    "@aws-sdk/credential-provider-node": "3.828.0",
    "@aws-sdk/middleware-host-header": "3.821.0",
    "@aws-sdk/middleware-logger": "3.821.0",
    "@aws-sdk/middleware-recursion-detection": "3.821.0",
    "@aws-sdk/middleware-user-agent": "3.828.0",
    "@aws-sdk/region-config-resolver": "3.821.0",
    "@aws-sdk/types": "3.821.0",
    "@aws-sdk/util-endpoints": "3.828.0",
    "@aws-sdk/util-user-agent-browser": "3.821.0",
    "@aws-sdk/util-user-agent-node": "3.828.0",
    "@smithy/config-resolver": "^4.1.4",
    "@smithy/core": "^3.5.3",
    "@smithy/fetch-http-handler": "^5.0.4",
    "@smithy/hash-node": "^4.0.4",
    "@smithy/invalid-dependency": "^4.0.4",
    "@smithy/middleware-content-length": "^4.0.4",
    "@smithy/middleware-endpoint": "^4.1.11",
    "@smithy/middleware-retry": "^4.1.12",
    "@smithy/middleware-serde": "^4.0.8",
    "@smithy/middleware-stack": "^4.0.4",
    "@smithy/node-config-provider": "^4.1.3",
    "@smithy/node-http-handler": "^4.0.6",
    "@smithy/protocol-http": "^5.1.2",
    "@smithy/smithy-client": "^4.4.3",
    "@smithy/types": "^4.3.1",
    "@smithy/url-parser": "^4.0.4",
    "@smithy/util-base64": "^4.0.0",
    "@smithy/util-body-length-browser": "^4.0.0",
    "@smithy/util-body-length-node": "^4.0.0",
    "@smithy/util-defaults-mode-browser": "^4.0.19",
    "@smithy/util-defaults-mode-node": "^4.0.19",
    "@smithy/util-endpoints": "^3.0.6",
    "@smithy/util-middleware": "^4.0.4",
    "@smithy/util-retry": "^4.0.5",
    "@smithy/util-utf8": "^4.0.0",
    tslib: "^2.6.2"
  },
  devDependencies: {
    "@tsconfig/node18": "18.2.4",
    "@types/node": "^18.19.69",
    concurrently: "7.0.0",
    "downlevel-dts": "0.10.1",
    rimraf: "3.0.2",
    typescript: "~5.8.3"
  },
  engines: {
    node: ">=18.0.0"
  },
  typesVersions: {
    "<4.0": {
      "dist-types/*": [
        "dist-types/ts3.4/*"
      ]
    }
  },
  files: [
    "dist-*/**"
  ],
  author: {
    name: "AWS SDK for JavaScript Team",
    url: "https://aws.amazon.com/javascript/"
  },
  license: "Apache-2.0",
  browser: {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  },
  "react-native": {
    "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-health",
  repository: {
    type: "git",
    url: "https://github.com/aws/aws-sdk-js-v3.git",
    directory: "clients/client-health"
  }
};

// node_modules/@aws-sdk/client-health/dist-es/endpoint/ruleset.js
var w = "required";
var x = "fn";
var y = "argv";
var z = "ref";
var a = true;
var b = "isSet";
var c = "booleanEquals";
var d = "error";
var e = "endpoint";
var f = "tree";
var g = "PartitionResult";
var h = "stringEquals";
var i = "sigv4";
var j = "health";
var k = { [w]: false, "type": "String" };
var l = { [w]: true, "default": false, "type": "Boolean" };
var m = { [z]: "Endpoint" };
var n = { [x]: c, [y]: [{ [z]: "UseFIPS" }, true] };
var o = { [x]: c, [y]: [{ [z]: "UseDualStack" }, true] };
var p = {};
var q = { [z]: "Region" };
var r = { [x]: "getAttr", [y]: [{ [z]: g }, "supportsFIPS"] };
var s = { [x]: c, [y]: [true, { [x]: "getAttr", [y]: [{ [z]: g }, "supportsDualStack"] }] };
var t = [n];
var u = [o];
var v = [q];
var _data = { version: "1.0", parameters: { Region: k, UseDualStack: l, UseFIPS: l, Endpoint: k }, rules: [{ conditions: [{ [x]: b, [y]: [m] }], rules: [{ conditions: t, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: d }, { conditions: u, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: d }, { endpoint: { url: m, properties: p, headers: p }, type: e }], type: f }, { conditions: [{ [x]: b, [y]: v }], rules: [{ conditions: [{ [x]: "aws.partition", [y]: v, assign: g }], rules: [{ conditions: [n, o], rules: [{ conditions: [{ [x]: c, [y]: [a, r] }, s], rules: [{ endpoint: { url: "https://health-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: p, headers: p }, type: e }], type: f }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: d }], type: f }, { conditions: t, rules: [{ conditions: [{ [x]: c, [y]: [r, a] }], rules: [{ endpoint: { url: "https://health-fips.{Region}.{PartitionResult#dnsSuffix}", properties: p, headers: p }, type: e }], type: f }, { error: "FIPS is enabled but this partition does not support FIPS", type: d }], type: f }, { conditions: u, rules: [{ conditions: [s], rules: [{ endpoint: { url: "https://health.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: p, headers: p }, type: e }], type: f }, { error: "DualStack is enabled but this partition does not support DualStack", type: d }], type: f }, { conditions: [{ [x]: h, [y]: [q, "aws-global"] }], endpoint: { url: "https://global.health.amazonaws.com", properties: { authSchemes: [{ name: i, signingName: j, signingRegion: "us-east-1" }] }, headers: p }, type: e }, { conditions: [{ [x]: h, [y]: [q, "aws-cn-global"] }], endpoint: { url: "https://global.health.amazonaws.com.cn", properties: { authSchemes: [{ name: i, signingName: j, signingRegion: "cn-northwest-1" }] }, headers: p }, type: e }, { endpoint: { url: "https://health.{Region}.{PartitionResult#dnsSuffix}", properties: p, headers: p }, type: e }], type: f }], type: f }, { error: "Invalid Configuration: Missing Region", type: d }] };
var ruleSet = _data;

// node_modules/@aws-sdk/client-health/dist-es/endpoint/endpointResolver.js
var cache = new EndpointCache({
  size: 50,
  params: ["Endpoint", "Region", "UseDualStack", "UseFIPS"]
});
var defaultEndpointResolver = (endpointParams, context = {}) => {
  return cache.get(endpointParams, () => resolveEndpoint(ruleSet, {
    endpointParams,
    logger: context.logger
  }));
};
customEndpointFunctions.aws = awsEndpointFunctions;

// node_modules/@aws-sdk/client-health/dist-es/runtimeConfig.shared.js
var getRuntimeConfig = (config) => {
  return {
    apiVersion: "2016-08-04",
    base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? fromBase64,
    base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? toBase64,
    disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
    endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? defaultEndpointResolver,
    extensions: (config == null ? void 0 : config.extensions) ?? [],
    httpAuthSchemeProvider: (config == null ? void 0 : config.httpAuthSchemeProvider) ?? defaultHealthHttpAuthSchemeProvider,
    httpAuthSchemes: (config == null ? void 0 : config.httpAuthSchemes) ?? [
      {
        schemeId: "aws.auth#sigv4",
        identityProvider: (ipc) => ipc.getIdentityProvider("aws.auth#sigv4"),
        signer: new AwsSdkSigV4Signer()
      }
    ],
    logger: (config == null ? void 0 : config.logger) ?? new NoOpLogger(),
    serviceId: (config == null ? void 0 : config.serviceId) ?? "Health",
    urlParser: (config == null ? void 0 : config.urlParser) ?? parseUrl,
    utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? fromUtf8,
    utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? toUtf8
  };
};

// node_modules/@aws-sdk/client-health/dist-es/runtimeConfig.browser.js
var getRuntimeConfig2 = (config) => {
  const defaultsMode = resolveDefaultsModeConfig(config);
  const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
  const clientSharedValues = getRuntimeConfig(config);
  return {
    ...clientSharedValues,
    ...config,
    runtime: "browser",
    defaultsMode,
    bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? calculateBodyLength,
    credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? ((_) => () => Promise.reject(new Error("Credential is missing"))),
    defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? createDefaultUserAgentProvider({ serviceId: clientSharedValues.serviceId, clientVersion: package_default.version }),
    maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? DEFAULT_MAX_ATTEMPTS,
    region: (config == null ? void 0 : config.region) ?? invalidProvider("Region is missing"),
    requestHandler: FetchHttpHandler.create((config == null ? void 0 : config.requestHandler) ?? defaultConfigProvider),
    retryMode: (config == null ? void 0 : config.retryMode) ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
    sha256: (config == null ? void 0 : config.sha256) ?? Sha256,
    streamCollector: (config == null ? void 0 : config.streamCollector) ?? streamCollector,
    useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
    useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
  };
};

// node_modules/@aws-sdk/client-health/dist-es/auth/httpAuthExtensionConfiguration.js
var getHttpAuthExtensionConfiguration = (runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
};
var resolveHttpAuthRuntimeConfig = (config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
};

// node_modules/@aws-sdk/client-health/dist-es/runtimeExtensions.js
var resolveRuntimeExtensions = (runtimeConfig, extensions) => {
  const extensionConfiguration = Object.assign(getAwsRegionExtensionConfiguration(runtimeConfig), getDefaultExtensionConfiguration(runtimeConfig), getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return Object.assign(runtimeConfig, resolveAwsRegionExtensionConfiguration(extensionConfiguration), resolveDefaultRuntimeConfig(extensionConfiguration), resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

// node_modules/@aws-sdk/client-health/dist-es/HealthClient.js
var HealthClient = class extends Client {
  constructor(...[configuration]) {
    const _config_0 = getRuntimeConfig2(configuration || {});
    super(_config_0);
    __publicField(this, "config");
    this.initConfig = _config_0;
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = resolveUserAgentConfig(_config_1);
    const _config_3 = resolveRetryConfig(_config_2);
    const _config_4 = resolveRegionConfig(_config_3);
    const _config_5 = resolveHostHeaderConfig(_config_4);
    const _config_6 = resolveEndpointConfig(_config_5);
    const _config_7 = resolveHttpAuthSchemeConfig(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, (configuration == null ? void 0 : configuration.extensions) || []);
    this.config = _config_8;
    this.middlewareStack.use(getUserAgentPlugin(this.config));
    this.middlewareStack.use(getRetryPlugin(this.config));
    this.middlewareStack.use(getContentLengthPlugin(this.config));
    this.middlewareStack.use(getHostHeaderPlugin(this.config));
    this.middlewareStack.use(getLoggerPlugin(this.config));
    this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
    this.middlewareStack.use(getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
      httpAuthSchemeParametersProvider: defaultHealthHttpAuthSchemeParametersProvider,
      identityProviderConfigProvider: async (config) => new DefaultIdentityProviderConfig({
        "aws.auth#sigv4": config.credentials
      })
    }));
    this.middlewareStack.use(getHttpSigningPlugin(this.config));
  }
  destroy() {
    super.destroy();
  }
};

// node_modules/@aws-sdk/client-health/dist-es/models/HealthServiceException.js
var HealthServiceException = class _HealthServiceException extends ServiceException {
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _HealthServiceException.prototype);
  }
};

// node_modules/@aws-sdk/client-health/dist-es/models/models_0.js
var EntityStatusCode = {
  IMPAIRED: "IMPAIRED",
  PENDING: "PENDING",
  RESOLVED: "RESOLVED",
  UNIMPAIRED: "UNIMPAIRED",
  UNKNOWN: "UNKNOWN"
};
var EventScopeCode = {
  ACCOUNT_SPECIFIC: "ACCOUNT_SPECIFIC",
  NONE: "NONE",
  PUBLIC: "PUBLIC"
};
var InvalidPaginationToken = class _InvalidPaginationToken extends HealthServiceException {
  constructor(opts) {
    super({
      name: "InvalidPaginationToken",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "InvalidPaginationToken");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _InvalidPaginationToken.prototype);
  }
};
var UnsupportedLocale = class _UnsupportedLocale extends HealthServiceException {
  constructor(opts) {
    super({
      name: "UnsupportedLocale",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "UnsupportedLocale");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _UnsupportedLocale.prototype);
  }
};
var EventAggregateField = {
  EventTypeCategory: "eventTypeCategory"
};
var EventStatusCode = {
  CLOSED: "closed",
  OPEN: "open",
  UPCOMING: "upcoming"
};
var EventTypeCategory = {
  ACCOUNT_NOTIFICATION: "accountNotification",
  INVESTIGATION: "investigation",
  ISSUE: "issue",
  SCHEDULED_CHANGE: "scheduledChange"
};
var ConcurrentModificationException = class _ConcurrentModificationException extends HealthServiceException {
  constructor(opts) {
    super({
      name: "ConcurrentModificationException",
      $fault: "client",
      ...opts
    });
    __publicField(this, "name", "ConcurrentModificationException");
    __publicField(this, "$fault", "client");
    Object.setPrototypeOf(this, _ConcurrentModificationException.prototype);
  }
};

// node_modules/@aws-sdk/client-health/dist-es/protocols/Aws_json1_1.js
var se_DescribeAffectedAccountsForOrganizationCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeAffectedAccountsForOrganization");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeAffectedEntitiesCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeAffectedEntities");
  let body;
  body = JSON.stringify(se_DescribeAffectedEntitiesRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeAffectedEntitiesForOrganizationCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeAffectedEntitiesForOrganization");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeEntityAggregatesCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeEntityAggregates");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeEntityAggregatesForOrganizationCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeEntityAggregatesForOrganization");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeEventAggregatesCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeEventAggregates");
  let body;
  body = JSON.stringify(se_DescribeEventAggregatesRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeEventDetailsCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeEventDetails");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeEventDetailsForOrganizationCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeEventDetailsForOrganization");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeEventsCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeEvents");
  let body;
  body = JSON.stringify(se_DescribeEventsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeEventsForOrganizationCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeEventsForOrganization");
  let body;
  body = JSON.stringify(se_DescribeEventsForOrganizationRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeEventTypesCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeEventTypes");
  let body;
  body = JSON.stringify(_json(input));
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DescribeHealthServiceStatusForOrganizationCommand = async (input, context) => {
  const headers = sharedHeaders("DescribeHealthServiceStatusForOrganization");
  const body = "{}";
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_DisableHealthServiceAccessForOrganizationCommand = async (input, context) => {
  const headers = sharedHeaders("DisableHealthServiceAccessForOrganization");
  const body = "{}";
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var se_EnableHealthServiceAccessForOrganizationCommand = async (input, context) => {
  const headers = sharedHeaders("EnableHealthServiceAccessForOrganization");
  const body = "{}";
  return buildHttpRpcRequest(context, headers, "/", void 0, body);
};
var de_DescribeAffectedAccountsForOrganizationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeAffectedEntitiesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_DescribeAffectedEntitiesResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeAffectedEntitiesForOrganizationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_DescribeAffectedEntitiesForOrganizationResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeEntityAggregatesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeEntityAggregatesForOrganizationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeEventAggregatesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeEventDetailsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_DescribeEventDetailsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeEventDetailsForOrganizationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_DescribeEventDetailsForOrganizationResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeEventsCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_DescribeEventsResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeEventsForOrganizationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = de_DescribeEventsForOrganizationResponse(data, context);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeEventTypesCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DescribeHealthServiceStatusForOrganizationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const data = await parseJsonBody(output.body, context);
  let contents = {};
  contents = _json(data);
  const response = {
    $metadata: deserializeMetadata(output),
    ...contents
  };
  return response;
};
var de_DisableHealthServiceAccessForOrganizationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_EnableHealthServiceAccessForOrganizationCommand = async (output, context) => {
  if (output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  await collectBody(output.body, context);
  const response = {
    $metadata: deserializeMetadata(output)
  };
  return response;
};
var de_CommandError = async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await parseJsonErrorBody(output.body, context)
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InvalidPaginationToken":
    case "com.amazonaws.health#InvalidPaginationToken":
      throw await de_InvalidPaginationTokenRes(parsedOutput, context);
    case "UnsupportedLocale":
    case "com.amazonaws.health#UnsupportedLocale":
      throw await de_UnsupportedLocaleRes(parsedOutput, context);
    case "ConcurrentModificationException":
    case "com.amazonaws.health#ConcurrentModificationException":
      throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
};
var de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new ConcurrentModificationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_InvalidPaginationTokenRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new InvalidPaginationToken({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var de_UnsupportedLocaleRes = async (parsedOutput, context) => {
  const body = parsedOutput.body;
  const deserialized = _json(body);
  const exception = new UnsupportedLocale({
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized
  });
  return decorateServiceException(exception, body);
};
var se_DateTimeRange = (input, context) => {
  return take(input, {
    from: (_) => _.getTime() / 1e3,
    to: (_) => _.getTime() / 1e3
  });
};
var se_dateTimeRangeList = (input, context) => {
  return input.filter((e2) => e2 != null).map((entry) => {
    return se_DateTimeRange(entry, context);
  });
};
var se_DescribeAffectedEntitiesRequest = (input, context) => {
  return take(input, {
    filter: (_) => se_EntityFilter(_, context),
    locale: [],
    maxResults: [],
    nextToken: []
  });
};
var se_DescribeEventAggregatesRequest = (input, context) => {
  return take(input, {
    aggregateField: [],
    filter: (_) => se_EventFilter(_, context),
    maxResults: [],
    nextToken: []
  });
};
var se_DescribeEventsForOrganizationRequest = (input, context) => {
  return take(input, {
    filter: (_) => se_OrganizationEventFilter(_, context),
    locale: [],
    maxResults: [],
    nextToken: []
  });
};
var se_DescribeEventsRequest = (input, context) => {
  return take(input, {
    filter: (_) => se_EventFilter(_, context),
    locale: [],
    maxResults: [],
    nextToken: []
  });
};
var se_EntityFilter = (input, context) => {
  return take(input, {
    entityArns: _json,
    entityValues: _json,
    eventArns: _json,
    lastUpdatedTimes: (_) => se_dateTimeRangeList(_, context),
    statusCodes: _json,
    tags: _json
  });
};
var se_EventFilter = (input, context) => {
  return take(input, {
    availabilityZones: _json,
    endTimes: (_) => se_dateTimeRangeList(_, context),
    entityArns: _json,
    entityValues: _json,
    eventArns: _json,
    eventStatusCodes: _json,
    eventTypeCategories: _json,
    eventTypeCodes: _json,
    lastUpdatedTimes: (_) => se_dateTimeRangeList(_, context),
    regions: _json,
    services: _json,
    startTimes: (_) => se_dateTimeRangeList(_, context),
    tags: _json
  });
};
var se_OrganizationEventFilter = (input, context) => {
  return take(input, {
    awsAccountIds: _json,
    endTime: (_) => se_DateTimeRange(_, context),
    entityArns: _json,
    entityValues: _json,
    eventStatusCodes: _json,
    eventTypeCategories: _json,
    eventTypeCodes: _json,
    lastUpdatedTime: (_) => se_DateTimeRange(_, context),
    regions: _json,
    services: _json,
    startTime: (_) => se_DateTimeRange(_, context)
  });
};
var de_AffectedEntity = (output, context) => {
  return take(output, {
    awsAccountId: expectString,
    entityArn: expectString,
    entityMetadata: _json,
    entityUrl: expectString,
    entityValue: expectString,
    eventArn: expectString,
    lastUpdatedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    statusCode: expectString,
    tags: _json
  });
};
var de_DescribeAffectedEntitiesForOrganizationResponse = (output, context) => {
  return take(output, {
    entities: (_) => de_EntityList(_, context),
    failedSet: _json,
    nextToken: expectString
  });
};
var de_DescribeAffectedEntitiesResponse = (output, context) => {
  return take(output, {
    entities: (_) => de_EntityList(_, context),
    nextToken: expectString
  });
};
var de_DescribeEventDetailsForOrganizationResponse = (output, context) => {
  return take(output, {
    failedSet: _json,
    successfulSet: (_) => de_DescribeEventDetailsForOrganizationSuccessfulSet(_, context)
  });
};
var de_DescribeEventDetailsForOrganizationSuccessfulSet = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_OrganizationEventDetails(entry, context);
  });
  return retVal;
};
var de_DescribeEventDetailsResponse = (output, context) => {
  return take(output, {
    failedSet: _json,
    successfulSet: (_) => de_DescribeEventDetailsSuccessfulSet(_, context)
  });
};
var de_DescribeEventDetailsSuccessfulSet = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_EventDetails(entry, context);
  });
  return retVal;
};
var de_DescribeEventsForOrganizationResponse = (output, context) => {
  return take(output, {
    events: (_) => de_OrganizationEventList(_, context),
    nextToken: expectString
  });
};
var de_DescribeEventsResponse = (output, context) => {
  return take(output, {
    events: (_) => de_EventList(_, context),
    nextToken: expectString
  });
};
var de_EntityList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_AffectedEntity(entry, context);
  });
  return retVal;
};
var de_Event = (output, context) => {
  return take(output, {
    arn: expectString,
    availabilityZone: expectString,
    endTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    eventScopeCode: expectString,
    eventTypeCategory: expectString,
    eventTypeCode: expectString,
    lastUpdatedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    region: expectString,
    service: expectString,
    startTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    statusCode: expectString
  });
};
var de_EventDetails = (output, context) => {
  return take(output, {
    event: (_) => de_Event(_, context),
    eventDescription: _json,
    eventMetadata: _json
  });
};
var de_EventList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_Event(entry, context);
  });
  return retVal;
};
var de_OrganizationEvent = (output, context) => {
  return take(output, {
    arn: expectString,
    endTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    eventScopeCode: expectString,
    eventTypeCategory: expectString,
    eventTypeCode: expectString,
    lastUpdatedTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    region: expectString,
    service: expectString,
    startTime: (_) => expectNonNull(parseEpochTimestamp(expectNumber(_))),
    statusCode: expectString
  });
};
var de_OrganizationEventDetails = (output, context) => {
  return take(output, {
    awsAccountId: expectString,
    event: (_) => de_Event(_, context),
    eventDescription: _json,
    eventMetadata: _json
  });
};
var de_OrganizationEventList = (output, context) => {
  const retVal = (output || []).filter((e2) => e2 != null).map((entry) => {
    return de_OrganizationEvent(entry, context);
  });
  return retVal;
};
var deserializeMetadata = (output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
});
var throwDefaultError = withBaseException(HealthServiceException);
var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers
  };
  if (resolvedHostname !== void 0) {
    contents.hostname = resolvedHostname;
  }
  if (body !== void 0) {
    contents.body = body;
  }
  return new HttpRequest(contents);
};
function sharedHeaders(operation) {
  return {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": `AWSHealth_20160804.${operation}`
  };
}

// node_modules/@aws-sdk/client-health/dist-es/commands/DescribeAffectedAccountsForOrganizationCommand.js
var DescribeAffectedAccountsForOrganizationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DescribeAffectedAccountsForOrganization", {}).n("HealthClient", "DescribeAffectedAccountsForOrganizationCommand").f(void 0, void 0).ser(se_DescribeAffectedAccountsForOrganizationCommand).de(de_DescribeAffectedAccountsForOrganizationCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/DescribeAffectedEntitiesCommand.js
var DescribeAffectedEntitiesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DescribeAffectedEntities", {}).n("HealthClient", "DescribeAffectedEntitiesCommand").f(void 0, void 0).ser(se_DescribeAffectedEntitiesCommand).de(de_DescribeAffectedEntitiesCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/DescribeAffectedEntitiesForOrganizationCommand.js
var DescribeAffectedEntitiesForOrganizationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DescribeAffectedEntitiesForOrganization", {}).n("HealthClient", "DescribeAffectedEntitiesForOrganizationCommand").f(void 0, void 0).ser(se_DescribeAffectedEntitiesForOrganizationCommand).de(de_DescribeAffectedEntitiesForOrganizationCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/DescribeEntityAggregatesCommand.js
var DescribeEntityAggregatesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DescribeEntityAggregates", {}).n("HealthClient", "DescribeEntityAggregatesCommand").f(void 0, void 0).ser(se_DescribeEntityAggregatesCommand).de(de_DescribeEntityAggregatesCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/DescribeEntityAggregatesForOrganizationCommand.js
var DescribeEntityAggregatesForOrganizationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DescribeEntityAggregatesForOrganization", {}).n("HealthClient", "DescribeEntityAggregatesForOrganizationCommand").f(void 0, void 0).ser(se_DescribeEntityAggregatesForOrganizationCommand).de(de_DescribeEntityAggregatesForOrganizationCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/DescribeEventAggregatesCommand.js
var DescribeEventAggregatesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DescribeEventAggregates", {}).n("HealthClient", "DescribeEventAggregatesCommand").f(void 0, void 0).ser(se_DescribeEventAggregatesCommand).de(de_DescribeEventAggregatesCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/DescribeEventDetailsCommand.js
var DescribeEventDetailsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DescribeEventDetails", {}).n("HealthClient", "DescribeEventDetailsCommand").f(void 0, void 0).ser(se_DescribeEventDetailsCommand).de(de_DescribeEventDetailsCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/DescribeEventDetailsForOrganizationCommand.js
var DescribeEventDetailsForOrganizationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DescribeEventDetailsForOrganization", {}).n("HealthClient", "DescribeEventDetailsForOrganizationCommand").f(void 0, void 0).ser(se_DescribeEventDetailsForOrganizationCommand).de(de_DescribeEventDetailsForOrganizationCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/DescribeEventsCommand.js
var DescribeEventsCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DescribeEvents", {}).n("HealthClient", "DescribeEventsCommand").f(void 0, void 0).ser(se_DescribeEventsCommand).de(de_DescribeEventsCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/DescribeEventsForOrganizationCommand.js
var DescribeEventsForOrganizationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DescribeEventsForOrganization", {}).n("HealthClient", "DescribeEventsForOrganizationCommand").f(void 0, void 0).ser(se_DescribeEventsForOrganizationCommand).de(de_DescribeEventsForOrganizationCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/DescribeEventTypesCommand.js
var DescribeEventTypesCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DescribeEventTypes", {}).n("HealthClient", "DescribeEventTypesCommand").f(void 0, void 0).ser(se_DescribeEventTypesCommand).de(de_DescribeEventTypesCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/DescribeHealthServiceStatusForOrganizationCommand.js
var DescribeHealthServiceStatusForOrganizationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DescribeHealthServiceStatusForOrganization", {}).n("HealthClient", "DescribeHealthServiceStatusForOrganizationCommand").f(void 0, void 0).ser(se_DescribeHealthServiceStatusForOrganizationCommand).de(de_DescribeHealthServiceStatusForOrganizationCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/DisableHealthServiceAccessForOrganizationCommand.js
var DisableHealthServiceAccessForOrganizationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "DisableHealthServiceAccessForOrganization", {}).n("HealthClient", "DisableHealthServiceAccessForOrganizationCommand").f(void 0, void 0).ser(se_DisableHealthServiceAccessForOrganizationCommand).de(de_DisableHealthServiceAccessForOrganizationCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/commands/EnableHealthServiceAccessForOrganizationCommand.js
var EnableHealthServiceAccessForOrganizationCommand = class extends Command.classBuilder().ep(commonParams).m(function(Command2, cs, config, o2) {
  return [
    getSerdePlugin(config, this.serialize, this.deserialize),
    getEndpointPlugin(config, Command2.getEndpointParameterInstructions())
  ];
}).s("AWSHealth_20160804", "EnableHealthServiceAccessForOrganization", {}).n("HealthClient", "EnableHealthServiceAccessForOrganizationCommand").f(void 0, void 0).ser(se_EnableHealthServiceAccessForOrganizationCommand).de(de_EnableHealthServiceAccessForOrganizationCommand).build() {
};

// node_modules/@aws-sdk/client-health/dist-es/Health.js
var commands = {
  DescribeAffectedAccountsForOrganizationCommand,
  DescribeAffectedEntitiesCommand,
  DescribeAffectedEntitiesForOrganizationCommand,
  DescribeEntityAggregatesCommand,
  DescribeEntityAggregatesForOrganizationCommand,
  DescribeEventAggregatesCommand,
  DescribeEventDetailsCommand,
  DescribeEventDetailsForOrganizationCommand,
  DescribeEventsCommand,
  DescribeEventsForOrganizationCommand,
  DescribeEventTypesCommand,
  DescribeHealthServiceStatusForOrganizationCommand,
  DisableHealthServiceAccessForOrganizationCommand,
  EnableHealthServiceAccessForOrganizationCommand
};
var Health = class extends HealthClient {
};
createAggregatedClient(commands, Health);

// node_modules/@aws-sdk/client-health/dist-es/pagination/DescribeAffectedAccountsForOrganizationPaginator.js
var paginateDescribeAffectedAccountsForOrganization = createPaginator(HealthClient, DescribeAffectedAccountsForOrganizationCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-health/dist-es/pagination/DescribeAffectedEntitiesForOrganizationPaginator.js
var paginateDescribeAffectedEntitiesForOrganization = createPaginator(HealthClient, DescribeAffectedEntitiesForOrganizationCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-health/dist-es/pagination/DescribeAffectedEntitiesPaginator.js
var paginateDescribeAffectedEntities = createPaginator(HealthClient, DescribeAffectedEntitiesCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-health/dist-es/pagination/DescribeEventAggregatesPaginator.js
var paginateDescribeEventAggregates = createPaginator(HealthClient, DescribeEventAggregatesCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-health/dist-es/pagination/DescribeEventTypesPaginator.js
var paginateDescribeEventTypes = createPaginator(HealthClient, DescribeEventTypesCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-health/dist-es/pagination/DescribeEventsForOrganizationPaginator.js
var paginateDescribeEventsForOrganization = createPaginator(HealthClient, DescribeEventsForOrganizationCommand, "nextToken", "nextToken", "maxResults");

// node_modules/@aws-sdk/client-health/dist-es/pagination/DescribeEventsPaginator.js
var paginateDescribeEvents = createPaginator(HealthClient, DescribeEventsCommand, "nextToken", "nextToken", "maxResults");
export {
  Command as $Command,
  ConcurrentModificationException,
  DescribeAffectedAccountsForOrganizationCommand,
  DescribeAffectedEntitiesCommand,
  DescribeAffectedEntitiesForOrganizationCommand,
  DescribeEntityAggregatesCommand,
  DescribeEntityAggregatesForOrganizationCommand,
  DescribeEventAggregatesCommand,
  DescribeEventDetailsCommand,
  DescribeEventDetailsForOrganizationCommand,
  DescribeEventTypesCommand,
  DescribeEventsCommand,
  DescribeEventsForOrganizationCommand,
  DescribeHealthServiceStatusForOrganizationCommand,
  DisableHealthServiceAccessForOrganizationCommand,
  EnableHealthServiceAccessForOrganizationCommand,
  EntityStatusCode,
  EventAggregateField,
  EventScopeCode,
  EventStatusCode,
  EventTypeCategory,
  Health,
  HealthClient,
  HealthServiceException,
  InvalidPaginationToken,
  UnsupportedLocale,
  Client as __Client,
  paginateDescribeAffectedAccountsForOrganization,
  paginateDescribeAffectedEntities,
  paginateDescribeAffectedEntitiesForOrganization,
  paginateDescribeEventAggregates,
  paginateDescribeEventTypes,
  paginateDescribeEvents,
  paginateDescribeEventsForOrganization
};
//# sourceMappingURL=@aws-sdk_client-health.js.map
