import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { HealthServiceException as __BaseException } from "../models/HealthServiceException";
import { ConcurrentModificationException, InvalidPaginationToken, UnsupportedLocale, } from "../models/models_0";
export const se_DescribeAffectedAccountsForOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAffectedAccountsForOrganization");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAffectedEntitiesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAffectedEntities");
    let body;
    body = JSON.stringify(se_DescribeAffectedEntitiesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAffectedEntitiesForOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAffectedEntitiesForOrganization");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEntityAggregatesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEntityAggregates");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEntityAggregatesForOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEntityAggregatesForOrganization");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEventAggregatesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEventAggregates");
    let body;
    body = JSON.stringify(se_DescribeEventAggregatesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEventDetailsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEventDetails");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEventDetailsForOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEventDetailsForOrganization");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEventsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEvents");
    let body;
    body = JSON.stringify(se_DescribeEventsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEventsForOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEventsForOrganization");
    let body;
    body = JSON.stringify(se_DescribeEventsForOrganizationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeEventTypesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEventTypes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeHealthServiceStatusForOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeHealthServiceStatusForOrganization");
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisableHealthServiceAccessForOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("DisableHealthServiceAccessForOrganization");
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_EnableHealthServiceAccessForOrganizationCommand = async (input, context) => {
    const headers = sharedHeaders("EnableHealthServiceAccessForOrganization");
    const body = "{}";
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_DescribeAffectedAccountsForOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAffectedEntitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAffectedEntitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAffectedEntitiesForOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeAffectedEntitiesForOrganizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEntityAggregatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEntityAggregatesForOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEventAggregatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEventDetailsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEventDetailsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEventDetailsForOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEventDetailsForOrganizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEventsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEventsForOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeEventsForOrganizationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeEventTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeHealthServiceStatusForOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisableHealthServiceAccessForOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
export const de_EnableHealthServiceAccessForOrganizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidPaginationToken":
        case "com.amazonaws.health#InvalidPaginationToken":
            throw await de_InvalidPaginationTokenRes(parsedOutput, context);
        case "UnsupportedLocale":
        case "com.amazonaws.health#UnsupportedLocale":
            throw await de_UnsupportedLocaleRes(parsedOutput, context);
        case "ConcurrentModificationException":
        case "com.amazonaws.health#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidPaginationTokenRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidPaginationToken({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedLocaleRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedLocale({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_DateTimeRange = (input, context) => {
    return take(input, {
        from: (_) => _.getTime() / 1_000,
        to: (_) => _.getTime() / 1_000,
    });
};
const se_dateTimeRangeList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DateTimeRange(entry, context);
    });
};
const se_DescribeAffectedEntitiesRequest = (input, context) => {
    return take(input, {
        filter: (_) => se_EntityFilter(_, context),
        locale: [],
        maxResults: [],
        nextToken: [],
    });
};
const se_DescribeEventAggregatesRequest = (input, context) => {
    return take(input, {
        aggregateField: [],
        filter: (_) => se_EventFilter(_, context),
        maxResults: [],
        nextToken: [],
    });
};
const se_DescribeEventsForOrganizationRequest = (input, context) => {
    return take(input, {
        filter: (_) => se_OrganizationEventFilter(_, context),
        locale: [],
        maxResults: [],
        nextToken: [],
    });
};
const se_DescribeEventsRequest = (input, context) => {
    return take(input, {
        filter: (_) => se_EventFilter(_, context),
        locale: [],
        maxResults: [],
        nextToken: [],
    });
};
const se_EntityFilter = (input, context) => {
    return take(input, {
        entityArns: _json,
        entityValues: _json,
        eventArns: _json,
        lastUpdatedTimes: (_) => se_dateTimeRangeList(_, context),
        statusCodes: _json,
        tags: _json,
    });
};
const se_EventFilter = (input, context) => {
    return take(input, {
        availabilityZones: _json,
        endTimes: (_) => se_dateTimeRangeList(_, context),
        entityArns: _json,
        entityValues: _json,
        eventArns: _json,
        eventStatusCodes: _json,
        eventTypeCategories: _json,
        eventTypeCodes: _json,
        lastUpdatedTimes: (_) => se_dateTimeRangeList(_, context),
        regions: _json,
        services: _json,
        startTimes: (_) => se_dateTimeRangeList(_, context),
        tags: _json,
    });
};
const se_OrganizationEventFilter = (input, context) => {
    return take(input, {
        awsAccountIds: _json,
        endTime: (_) => se_DateTimeRange(_, context),
        entityArns: _json,
        entityValues: _json,
        eventStatusCodes: _json,
        eventTypeCategories: _json,
        eventTypeCodes: _json,
        lastUpdatedTime: (_) => se_DateTimeRange(_, context),
        regions: _json,
        services: _json,
        startTime: (_) => se_DateTimeRange(_, context),
    });
};
const de_AffectedEntity = (output, context) => {
    return take(output, {
        awsAccountId: __expectString,
        entityArn: __expectString,
        entityMetadata: _json,
        entityUrl: __expectString,
        entityValue: __expectString,
        eventArn: __expectString,
        lastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        statusCode: __expectString,
        tags: _json,
    });
};
const de_DescribeAffectedEntitiesForOrganizationResponse = (output, context) => {
    return take(output, {
        entities: (_) => de_EntityList(_, context),
        failedSet: _json,
        nextToken: __expectString,
    });
};
const de_DescribeAffectedEntitiesResponse = (output, context) => {
    return take(output, {
        entities: (_) => de_EntityList(_, context),
        nextToken: __expectString,
    });
};
const de_DescribeEventDetailsForOrganizationResponse = (output, context) => {
    return take(output, {
        failedSet: _json,
        successfulSet: (_) => de_DescribeEventDetailsForOrganizationSuccessfulSet(_, context),
    });
};
const de_DescribeEventDetailsForOrganizationSuccessfulSet = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrganizationEventDetails(entry, context);
    });
    return retVal;
};
const de_DescribeEventDetailsResponse = (output, context) => {
    return take(output, {
        failedSet: _json,
        successfulSet: (_) => de_DescribeEventDetailsSuccessfulSet(_, context),
    });
};
const de_DescribeEventDetailsSuccessfulSet = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EventDetails(entry, context);
    });
    return retVal;
};
const de_DescribeEventsForOrganizationResponse = (output, context) => {
    return take(output, {
        events: (_) => de_OrganizationEventList(_, context),
        nextToken: __expectString,
    });
};
const de_DescribeEventsResponse = (output, context) => {
    return take(output, {
        events: (_) => de_EventList(_, context),
        nextToken: __expectString,
    });
};
const de_EntityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AffectedEntity(entry, context);
    });
    return retVal;
};
const de_Event = (output, context) => {
    return take(output, {
        arn: __expectString,
        availabilityZone: __expectString,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        eventScopeCode: __expectString,
        eventTypeCategory: __expectString,
        eventTypeCode: __expectString,
        lastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        region: __expectString,
        service: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        statusCode: __expectString,
    });
};
const de_EventDetails = (output, context) => {
    return take(output, {
        event: (_) => de_Event(_, context),
        eventDescription: _json,
        eventMetadata: _json,
    });
};
const de_EventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Event(entry, context);
    });
    return retVal;
};
const de_OrganizationEvent = (output, context) => {
    return take(output, {
        arn: __expectString,
        endTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        eventScopeCode: __expectString,
        eventTypeCategory: __expectString,
        eventTypeCode: __expectString,
        lastUpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        region: __expectString,
        service: __expectString,
        startTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        statusCode: __expectString,
    });
};
const de_OrganizationEventDetails = (output, context) => {
    return take(output, {
        awsAccountId: __expectString,
        event: (_) => de_Event(_, context),
        eventDescription: _json,
        eventMetadata: _json,
    });
};
const de_OrganizationEventList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OrganizationEvent(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSHealth_20160804.${operation}`,
    };
}
